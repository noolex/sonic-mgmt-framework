6a7
> //#include "clish/plugin/clish_api.h"
17c18,19
< 	clish_help_t *help, const char *line, size_t *max_width)
---
> 	clish_help_t *help, const char *line, size_t *max_width,
> 	clish_context_t *context)
20a23
> 	clish_context_t local_context;
25a29
> 	clish_context_init(&local_context, this);
26a31,38
> 		clish_context__set_cmd(&local_context, cmd);
> 		if(clish_shell_command_test(cmd, &local_context) == BOOL_FALSE)
> 			continue;
> 
> 		if (clish_command__get_hidden(cmd) == BOOL_TRUE)
>                         continue;
> 		if (clish_command__get_enabled(cmd) == BOOL_FALSE)
>                         continue;
34,36c46,48
< 		lub_argv_add(help->name, name);
< 		lub_argv_add(help->help, clish_command__get_text(cmd));
< 		lub_argv_add(help->detail, clish_command__get_detail(cmd));
---
> 		lub_argv_add(help->name, name, BOOL_FALSE);
> 		lub_argv_add(help->help, clish_command__get_text(cmd), BOOL_FALSE);
> 		lub_argv_add(help->detail, clish_command__get_detail(cmd), BOOL_FALSE);
51c63
< 	clish_pargv_status_e status = CLISH_LINE_OK;
---
> 	clish_pargv_status_t status = CLISH_LINE_OK;
74c86
< 		argv, &idx, completion, index);
---
> 		argv, &idx, completion, index, NULL, NULL);
80a93
> 		const clish_parg_t *parg;
84a98,104
> 		if (clish_param__get_hidden(param) == BOOL_TRUE)
> 			continue;
> 
> 		if (clish_param__get_enabled(param) == BOOL_FALSE)
> 			continue;
> 
> 		parg = clish_pargv__get_parg(completion, i);
93c113
< 		clish_param_help(param, help);
---
> 		clish_param_help(param, help, clish_parg__get_value((parg)));
107c127,184
< void clish_shell_help(clish_shell_t *this, const char *line)
---
> void sort_help_command (const lub_argv_t *name , const lub_argv_t *help, int complete_status,int *dupCount) {
>         int count = 0;
>         int indexi,indexj;
>         int strcmp_ret;
>         int dupSwapCount = 0;
>         char * temp = NULL;
>         const char *str1 = NULL;
>         const char *str2 = NULL;
>         bool_t dont_sort = BOOL_FALSE;
>         bool_t isOrderSet = BOOL_FALSE;
> 
>         count = lub_argv__get_count(name);
>         /* if the last element is <cr>, then don't sort that the last element */
>         if (!complete_status) {
>                 count = count - 1;
>         }
>         for (indexi=0;indexi<count-1;indexi++) {
>             isOrderSet = lub_argv__get_order(name, indexi);
>             if (isOrderSet == BOOL_TRUE) {
>                 dont_sort = BOOL_TRUE;
>             } else {
>                 dont_sort = BOOL_FALSE; 
>                 break;
>             }
>         }
> 
>         if (dont_sort == BOOL_TRUE) {
>             return;
>         }
> 
>         for (indexi=0; indexi< count-1-dupSwapCount; indexi++) {
>                 for (indexj=indexi+1; indexj< count-dupSwapCount; indexj++) {
>                         str1 = lub_argv__get_arg(name, indexi);
>                         str2 = lub_argv__get_arg(name, indexj);
> 
>                         if ((str1 == NULL) || (str2 == NULL))
>                                 continue;
>                         /* check two strings. if compared string is lowest letter, then swap */
>                         strcmp_ret = lub_string_nocasecmp(str1,str2);
>                         if(strcmp_ret > 0) {
>                                 /*swap the name to sort */
>                                 lub_argv__swap_arg(name,indexi,indexj);
>                                 /*swap the corresponding help string of command */
>                                 lub_argv__swap_arg(help,indexi,indexj);
>                         } else if(strcmp_ret == 0) {
> 				/*Move the duplicate token to the last place. So that the duplicate token will be printed.*/
>                                 lub_argv__swap_arg(name,indexj,count-1-dupSwapCount);
>                                 lub_argv__swap_arg(help,indexj,count-1-dupSwapCount);
> 				dupSwapCount++;
>                         }
>                 }
>         }
> 	*dupCount = dupSwapCount;
> 
> }
> 
> /*--------------------------------------------------------- */
> void clish_shell_help(clish_shell_t *this, const char *line, clish_context_t *context)
112a190,191
> 	int complete_status = 0;
> 	int dupCount = 0;
119c198
< 	available_commands(this, &help, line, &max_width);
---
> 	available_commands(this, &help, line, &max_width, context);
122c201
< 	cmd = clish_shell_resolve_command(this, line);
---
> 	cmd = clish_shell_resolve_command(this, line, context);
126,127c205
< 		int status;
< 		status = available_params(this, &help, cmd, line, &width);
---
> 		complete_status = available_params(this, &help, cmd, line, &width);
131,134c209,212
< 		if (!status) {
< 			lub_argv_add(help.name, "<cr>");
< 			lub_argv_add(help.help, NULL);
< 			lub_argv_add(help.detail, NULL);
---
> 		if (!complete_status) {
> 			lub_argv_add(help.name, "<cr>", BOOL_FALSE);
> 			lub_argv_add(help.help, NULL, BOOL_FALSE);
> 			lub_argv_add(help.detail, NULL, BOOL_FALSE);
139,140c217
< 
< 	/* Print help messages */
---
>     
142c219,229
< 		fprintf(stderr, "  %-*s  %s\n", (int)max_width,
---
> 		if(max_width < strlen(lub_argv__get_arg(help.name, i)))
> 			max_width = strlen(lub_argv__get_arg(help.name, i));
> 	}
> 
> 	/* Sort the help command name and is help strings. Also move the duplicate command to last place. */
> 	sort_help_command(help.name, help.help, complete_status, &dupCount);
> 	/* Print help messages. Duplicate commands present in the last position wont be printed. */
> 	for (i = 0; i < lub_argv__get_count(help.name)-dupCount; i++) {
> 		if(max_width < strlen(lub_argv__get_arg(help.name, i)))
> 			max_width = strlen(lub_argv__get_arg(help.name, i));
> 		fprintf(stderr, "  %-*s  %-s\n", (int)max_width,
