6a7
> #include <stdbool.h>
10a12
> #include "clish/pargv.h"
15c17,18
< 	const clish_command_t **ret_cmd, clish_pargv_t **pargv)
---
> 	const clish_command_t **ret_cmd, clish_pargv_t **pargv,
> 	clish_context_t *orig_context, unsigned *err_len)
21a25,26
>         unsigned int errArg = 0;/* find the error param*/
>         unsigned int strMatchLen =0; /*find the exact position of error*/
23c28
< 	*ret_cmd = cmd = clish_shell_resolve_command(this, line);
---
> 	*ret_cmd = cmd = clish_shell_resolve_command(this, line, orig_context);
38c43,61
< 		argv, &idx, NULL, 0);
---
> 		argv, &idx, NULL, 0, &errArg, &strMatchLen);
>         
>         /*find the error param exact character*/
>         if ((CLISH_BAD_PARAM == result) || (CLISH_BAD_CMD == result)) {
>             int argcnt = lub_argv__get_count(argv);
>             int index =0;
>             int arglen = 0;
>             for (index=0;(index<errArg) && (errArg<argcnt);index++) 
>             {
>                 const char *argval = lub_argv__get_arg(argv,index);
>                 if( argval) {
>                	    arglen += strlen(argval);
>                         arglen ++;
>                 }
>             }
>             if(err_len && arglen)
>                 *err_len = arglen + strMatchLen;	
>         }
> 
48a72,135
> static bool_t is_valid_regexp_select_iteration(const clish_param_t *param,
>         unsigned idx, unsigned need_index, unsigned is_switch, const char* arg)
> {
> 	clish_ptype_t *ptype = clish_param__get_ptype(param);
> 	bool_t res = BOOL_FALSE;
> 
> 	/* 
> 	 * This is the case where user enter interface vlan ? to get help
> 	 * option for the CLISH_PTYPE_METHOD_REGEXP_SELECT ptype.
> 	 */
> 	if (((idx + 1 == need_index) && 
> 		CLISH_PTYPE_METHOD_REGEXP_SELECT == clish_ptype__get_method(ptype))) {
> 		res = BOOL_TRUE;
> 	} else if ((idx + 1 == need_index) && is_switch) {
> 		/* 
> 		 * When current PARAM is switch, check if we have a sub PARAM with method
> 		 * CLISH_PTYPE_METHOD_REGEXP_SELECT inside the switch.If so, check if the current
> 		 * matches the regexp_select pattern.If it matches we return true from this
> 		 * function, indicating the caller to include the REGEXP_SELECT PARAM
> 		 * to the available_param for help.Otherwise return false.
> 		 * For CLI like "management route 1.1.1.0/24", we have a switch with a PARAM
> 		 * with method REGEXP_SELECT.The switch also includes another PARAM
> 		 * for nexthop IP.Now if user executes "management route 1.1.1.0/24 1.1.1.1 ?",
> 		 * the last entered value "1.1.1.1" won't match with the regexp_select pattern
> 		 * and hence we will return false from this function.The caller will hence
> 		 * exclude the regexp_select PARAM from available_param
> 		 */
> 		unsigned i, rec_paramc = clish_param__get_param_count(param);
> 		clish_param_t *cparam = NULL;
> 		for (i = 0; i < rec_paramc; i++) {
> 			cparam = clish_param__get_param(param, i);
> 			if (!cparam)
> 				break;
> 
> 			if (CLISH_PARAM_SUBCOMMAND == clish_param__get_mode(cparam) ||
> 				CLISH_PARAM_COMMON == clish_param__get_mode(cparam)) {
> 				const clish_ptype_t *ptype =
> 						clish_param__get_ptype(cparam);
> 				if (ptype && (CLISH_PTYPE_METHOD_REGEXP_SELECT ==
> 					clish_ptype__get_method(ptype))) {
> 					const char *name = NULL;
> 					int j = 0, cnt =0;
> 					cnt = clish_ptype_regexp_select__get_argv_count(ptype);
> 					for (;j < cnt; j++) {
> 						name = clish_ptype_regexp_select__get_name(ptype, j);
> 						if ((arg) && (name && ((name == lub_string_nocasestr(name, arg))
> 			
> 									))) {
> 							res = BOOL_TRUE;
> 							lub_string_free((char *)name);
> 							break;
> 						}
> 						if(name)
> 							lub_string_free((char *)name);
> 					}
> 				}
> 			}
> 		}
> 	}
> 
> 	return res;
> }
> 
> /*--------------------------------------------------------- */
75c162,163
< 	unsigned *idx, clish_pargv_t *last, unsigned need_index)
---
> 	unsigned *idx, clish_pargv_t *last, unsigned need_index,
> 	unsigned *errP, unsigned *strmatchLen)
82c170
< 	clish_pargv_status_e retval;
---
> 	clish_pargv_status_t retval;
84a173
> 	int recursive_start = 0;
97a187,188
> 		clish_ptype_t *ptype = NULL;
> 		char *cmd_name = NULL;
101a193,198
>                 if (idx && errP) {
>                     if(*idx <= argc) {
>                      *errP = *idx;
>                     }
>                 }
> 
115a213,214
> 		ptype = clish_param__get_ptype(param);
> 		cmd_name = (char*)clish_command__get_name(cmd);
117c216,221
< 		if (last && (*idx == need_index) &&
---
> 		/* In order to show the help string for interface, we need to process  
> 		 * *idx + 1 = need_index, this is true for some of the show command which uses 
> 		 * CLISH_PTYPE_REGEXP_SELECT ptypes example 'do show ip ospf 4 interface vlan'.
> 		 */
> 		if (last && ((*idx == need_index)||
> 			is_valid_regexp_select_iteration(param, *idx, need_index, is_switch, arg)) &&
120a225
> 				bool keyword_match = false;
127,128c232,237
< 					if (CLISH_PARAM_SUBCOMMAND ==
< 						clish_param__get_mode(cparam)) {
---
> 					ptype = clish_param__get_ptype(cparam);
> 
> 					if (CLISH_PARAM_SUBCOMMAND == clish_param__get_mode(cparam) || 
> 						((CLISH_PARAM_COMMON == clish_param__get_mode(cparam)) &&
> 						(CLISH_PTYPE_METHOD_REGEXP_SELECT ==
> 						 clish_ptype__get_method(ptype)))) {
131,133c240,304
< 						if (!arg || (arg && 
< 							(pname == lub_string_nocasestr(pname,
< 							arg))))
---
> 					    clish_ptype_t *ptype = 
> 								clish_param__get_ptype(cparam);
> 						if ((CLISH_PTYPE_METHOD_REGEXP_SELECT != clish_ptype__get_method(ptype)) &&
> 						(!arg || (arg && (pname == lub_string_nocasestr(pname, arg))))) {
> 							clish_pargv_insert(last, cparam, arg);
> 							if(arg) {
> 								/*arg non NULL means partial keyword entered */
> 								keyword_match = true;
> 							}
> 						} else if (CLISH_PTYPE_METHOD_REGEXP_SELECT ==
> 							clish_ptype__get_method(ptype)) {
> 							const char *name = NULL;
> 							int j = 0, cnt =0;
> 							cnt = clish_ptype_regexp_select__get_argv_count(ptype);
> 							for (;j < cnt; j++) {
> 								name = clish_ptype_regexp_select__get_name(ptype, j);
> 								if ((!arg) || (name && (name == lub_string_nocasestr(name, arg)))) {
> 									if (*idx + 1 == need_index || *idx == need_index) {
> 										clish_pargv_insert(last, cparam, arg);
> 										if(arg) {
> 											/*arg non NULL means partial keyword entered */
> 											keyword_match = true;
> 										}
> 									}
> 									if (strncmp(cmd_name, IFACE_CMD, strlen(IFACE_CMD))) {
>                                                                         	/* Handling show and other non interface
>                                                                          	 * related config commands such as
>                                                                          	 * spanning-tree interface. */
>                                                                                 if (*idx + 1 == need_index)
>                                                                                         clish_ptype__set_usename(ptype, USE_VALUE);
>                                                                                 else if (cnt > 1)
>                                                                                         clish_ptype__set_usename(ptype, USE_RANGE);
>                                                                                 else
>                                                                                         clish_ptype__set_usename(ptype, USE_NAME);
> 									} else {
>                                                                                 /* Interface specific commands handling */
>                                                                                 if (*idx + 1 == need_index)
>                                                                                         clish_ptype__set_usename(ptype, USE_VALUE);
>                                                                                 else
>                                                                                         clish_ptype__set_usename(ptype, USE_NAME);
>                                                                         }
> 									break;
> 								}
> 
> 								if (name) {
> 								   	lub_string_free((char*)name);
> 									name = NULL;
> 								}
> 							}
> 							if (name) lub_string_free((char*)name);
> 						}
> 					} else {
> 						if((*idx == need_index) && !keyword_match) {
> 							/* The following clish_pargv_insert inserts a non-keyword PARAM
> 							   which is part of a switch to the help list.Suppose there is a switch
> 							   between non-keyword  "<ip-addr>" and regexp_select PARAM "vlan".
> 							   On execution of "management route 1.1.1.0/24 vlan?" or
> 							   "management route 1.1.1.0/24 vlan ?", we should not be
> 							   inserting the non-keyword.*idx will be need_index-1 for
> 							   "management route 1.1.1.0/24 vlan ?".So the check
> 							   (*idx == need_index)" will take care of preventing the non-keyword
> 							   from getting added for "vlan ?".For the case vlan?, the keyword_match
> 							   flag will track if any keyword is added already.if added already
> 							   skip adding the non-keyword.This solution expects that the keywords
> 							   are added before the non-keywords in the switch */
136,138c307
< 					} else {
< 						clish_pargv_insert(last,
< 							cparam, arg);
---
> 						}
142,143c311,314
< 				if (CLISH_PARAM_SUBCOMMAND ==
< 					clish_param__get_mode(param)) {
---
> 				if (CLISH_PARAM_SUBCOMMAND == clish_param__get_mode(param) ||
> 						((CLISH_PARAM_COMMON == clish_param__get_mode(param)) &&
> 						(CLISH_PTYPE_METHOD_REGEXP_SELECT ==
> 						 clish_ptype__get_method(ptype)))) {
145,147c316,320
< 					    clish_param__get_value(param);
< 					if (!arg || (arg &&
< 						(pname == lub_string_nocasestr(pname, arg))))
---
> 						clish_param__get_value(param);
> 					clish_ptype_t *ptype =
> 						clish_param__get_ptype(param);
> 					if ((CLISH_PTYPE_METHOD_REGEXP_SELECT != clish_ptype__get_method(ptype)) && 
> 					(!arg || (arg && (pname == lub_string_nocasestr(pname, arg)))))
148a322,356
> 					else if (CLISH_PTYPE_METHOD_REGEXP_SELECT ==
> 						clish_ptype__get_method(ptype)) {
> 						const char *name;
> 						int j = 0, cnt =0;
> 						cnt = clish_ptype_regexp_select__get_argv_count(ptype);
> 						for (;j < cnt; j++) {
> 							name = clish_ptype_regexp_select__get_name(ptype, j);
> 							if ((!arg) || (name && ((name == lub_string_nocasestr(name, arg))))) {
> 								clish_pargv_insert(last, param, arg);
>                                                                 if (strncmp(cmd_name, IFACE_CMD, strlen(IFACE_CMD))) {
>                                                                         if (*idx + 1 == need_index)
>                                                                                 clish_ptype__set_usename(ptype, USE_VALUE);
>                                                                         else if (cnt > 1)
>                                                                                 clish_ptype__set_usename(ptype, USE_RANGE);
>                                                                         else
>                                                                                 clish_ptype__set_usename(ptype, USE_NAME);
>                                                                 } else {
>                                                                         if (*idx + 1 == need_index)
>                                                                                 clish_ptype__set_usename(ptype, USE_VALUE);
>                                                                         else
>                                                                                 clish_ptype__set_usename(ptype, USE_NAME);
>                                                                 }
> 								break;
> 							}
> 							if(name != NULL) {
> 								lub_string_free((char*)name);
> 								name = NULL;
> 							}
> 						}
>                         			/* handle resource leak */
>                         			if(name != NULL) {
>                             				lub_string_free((char*)name);
>                             				name = NULL;
>                         			}
> 					}
173c381
< 			if (clish_pargv_find_arg(pargv, clish_param__get_name(param))) {
---
> 			if (clish_pargv_find_arg(pargv, clish_param__get_name(param))) { 
187a396,484
> 					} else {
> 						/*  For CLISH_PTYPE_REGEXP_SELECT method, we try to match the
> 						 *  input arg against a PARAM. If it is not matching we try
> 						 *  concatenating the next arg to this arg and try matching
> 						 *  the concatenated string with the PARAM.
> 						 */
> 						if(!validated)
> 						{
> 							clish_ptype_method_e method =
> 								clish_ptype__get_method(clish_param__get_ptype(cparam));
> 							if(method == CLISH_PTYPE_METHOD_REGEXP_SELECT)
> 							{
> 								char  *arg2 = NULL, *arg_backup = (char*)arg;
> 								
> 								arg2 = lub_string_dup(arg);
> 								if((*idx + 1) < argc)
> 								{
> 									(*idx)++;
> 									arg = lub_argv__get_arg(argv, *idx);
> 									lub_string_cat(&arg2, arg);
> 									arg = arg2;
> 									validated = arg ?
> 									clish_param_validate(cparam, arg) : NULL;
> 									if(!validated)
> 									{
> 										/*Not matching even after concatinating next arg
> 										So revert to old arg itself to try matching to 
> 										next param*/
> 										(*idx)--;
> 										arg = arg_backup;
> 										lub_string_free(arg2);
> 										arg2 = NULL;
> 									}
> 									else
> 									{
> 										rec_paramv = clish_param__get_paramv(cparam);
> 										rec_paramc = clish_param__get_param_count(cparam);
> 										lub_string_free(arg2);
> 										break;
> 									}
> 								}
> 
> 								if(!validated) {
> 									const char *name;
> 									int j = 0, cnt =0;
> 									cnt = clish_ptype_regexp_select__get_argv_count(clish_param__get_ptype(cparam));
> 									for (;j < cnt; j++) {
> 										name = clish_ptype_regexp_select__get_name(clish_param__get_ptype(cparam), j);
> 										if ((arg) && (name && ((name == lub_string_nocasestr(name, arg))))) {
> 											if(((*idx + 1) < argc)&& (errP)&&(strmatchLen)) {
> 												*errP = (*idx + 1);
> 												*strmatchLen = 0;
> 											}
> 											break;
> 										} else if(arg && strmatchLen) {
> 											int stmatch = lub_string_equal_part_nocase(name,arg,BOOL_TRUE);
> 											if( stmatch > (*strmatchLen))
> 												*strmatchLen = stmatch;
> 										}
> 										if(name != NULL) {
> 											lub_string_free((char*)name);
> 											name = NULL;
> 										}
> 									}
> 								}
> 
> 								/* Handle resource leak */
>  								if(arg2 != NULL) {
>  									lub_string_free(arg2);
>  									arg2 = NULL;
> 								}
> 							} else if(method == CLISH_PTYPE_METHOD_SELECT){
> 						                int i=0;
> 						                char *val = NULL;
> 						                /* Iterate possible completion */
> 						                while (cparam && (val = clish_ptype_method_select__get_name(clish_param__get_ptype(cparam), i++))) {
> 						                        /* check for the name */
> 									unsigned strmatch = lub_string_equal_part_nocase(val,arg,BOOL_TRUE);
> 									if(strmatchLen && strmatch>*strmatchLen)
> 										*strmatchLen = strmatch;
>                 						}
> 
> 							} else if(arg && strmatchLen){
> 								char *val = clish_param__get_value(cparam);
> 								unsigned strmatch = lub_string_equal_part_nocase(val,arg,BOOL_TRUE);
> 								if(strmatch>*strmatchLen)
> 									*strmatchLen = strmatch;
>                                                         }
> 						}
192a490,560
> 				/*  For CLISH_PTYPE_REGEXP_SELECT method, we try to match the
> 				 *  input arg against a PARAM. If it is not matching we try
> 				 *  concatenating the next arg to this arg and try matching
> 				 *  the concatenated string with the PARAM.
> 				 */
> 				if(!validated)
> 				{
> 					clish_ptype_method_e method = clish_ptype__get_method(clish_param__get_ptype(param));
> 					if(method == CLISH_PTYPE_METHOD_REGEXP_SELECT)
> 					{
> 						char  *arg2 = NULL;
> 						
> 						arg2 = lub_string_dup(arg);
> 						if((*idx + 1) < argc)
> 						{
> 							(*idx)++;
> 							arg = lub_argv__get_arg(argv, *idx);
> 							lub_string_cat(&arg2, arg);
> 							arg = arg2;
> 							validated = arg ?
> 							clish_param_validate(param, arg) : NULL;
> 							if(!validated)
> 							{
> 								/*Not matching even after concatinating next arg
> 								So revert to old arg itself to try matching to 
> 								next param*/
> 								(*idx)--;
> 							}
> 						}
> 						if(!validated) {
> 							const char *name;
> 							int j = 0, cnt =0; 
> 							cnt = clish_ptype_regexp_select__get_argv_count(clish_param__get_ptype(param));
> 							for (;j < cnt; j++) {
> 								name = clish_ptype_regexp_select__get_name(clish_param__get_ptype(param), j);
> 								if ((arg) && (name && ((name == lub_string_nocasestr(name, arg))))) {
> 									if(((*idx + 1) < argc)&& (errP) && strmatchLen) {
> 										*errP = (*idx + 1);
> 										*strmatchLen = 0; 
> 									}
> 									break;
> 								} else if(arg && strmatchLen) {
> 									int strmatch = lub_string_equal_part_nocase(name,arg,BOOL_TRUE);
> 									if(strmatch>*strmatchLen)
> 										*strmatchLen = strmatch;
> 								}
> 								if(name != NULL) {
> 									lub_string_free((char*)name);
> 									name = NULL;
> 								}
> 							}
> 						}
> 
> 					} else if(method == CLISH_PTYPE_METHOD_SELECT){
> 				                int i=0;
> 				                char *val = NULL;
> 				                /* Iterate possible completion */
> 				                while (param && (val = clish_ptype_method_select__get_name(clish_param__get_ptype(param), i++))) {
> 				                        /* check for the name */
> 							unsigned strmatch = lub_string_equal_part_nocase(val,arg,BOOL_TRUE);
> 							if(strmatchLen && strmatch>*strmatchLen) { *strmatchLen = strmatch; }
> 							lub_string_free(val);
>                 				}
> 
> 					} else if(arg && strmatchLen){
> 						char *val = clish_param__get_value(param);
> 						int strmatch = lub_string_equal_part_nocase(val,arg,BOOL_TRUE);
> 						if(strmatch > *strmatchLen)
> 							*strmatchLen = strmatch;
>                                         }
> 				}
203,204c571,575
< 					clish_pargv_insert(pargv, param,
< 						validated);
---
> 					if (clish_pargv_insert(pargv, param,
> 						validated) < 0) {
> 						lub_string_free(validated);
> 						return CLISH_BAD_PARAM;
> 					}
220c591
< 							argv, idx, last, need_index);
---
> 							argv, idx, last, need_index, errP, strmatchLen);
250c621,623
< 					else
---
> 					else {
> 						clish_pargv_insert(pargv, param,
> 								   clish_param__get_name(param));
251a625
> 					}
275c649
< 			(*idx <= argc) && (index >= paramc)) {
---
> 			(*idx <= argc) && (index >= paramc) && (need_index != 0)) {
296d669
< 			char *enc = NULL;
301,304c674
< 			/* Escape quote and backslash */
< 			enc = lub_string_encode(arg, lub_string_esc_quoted);
< 			lub_string_cat(&args, enc);
< 			lub_string_free(enc);
---
> 			lub_string_cat(&args, arg);
