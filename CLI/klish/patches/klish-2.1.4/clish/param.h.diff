3,4d2
<  * Parameter instances are assocated with a command line and used to validate the
<  * the arguments which a user is inputing for a command.
5a4,7
> /**
> \ingroup clish
> \defgroup clish_param param
> @{
6a9,14
> \brief This class represents an instance of a parameter type.
> 
> Parameter instances are assocated with a command line and used to validate the
> the arguments which a user is inputing for a command.
> 
> */
16a25
> #include "mgmt_clish_extn_param.h"
18c27,29
< /* The means by which the param is interpreted */
---
> /**
>  * The means by which the param is interpreted.
>  */
20c31,33
< 	/* A common parameter */
---
>     /**
>      * A common parameter.
>     */
22c35,38
< 	/* A swich parameter. Choose the only one of nested parameters. */
---
>     /**
>      * A swich parameter.
>      * Choose the only one of nested parameters.
>      */
24c40,43
< 	/* A subcomand. Identified by it's name. */
---
>     /**
>      * A subcomand.
>      * Identified by it's name.
>      */
28,29c47,52
< /* Class param */
< 
---
> /*=====================================
>  * PARAM INTERFACE
>  *===================================== */
> /*-----------------
>  * meta functions
>  *----------------- */
32c55,57
< 
---
> /*-----------------
>  * methods
>  *----------------- */
34c59
< void clish_param_help(const clish_param_t * instance, clish_help_t *help);
---
> void clish_param_help(const clish_param_t * instance, clish_help_t *help, const char *pval);
39,66c64,77
< 
< _CLISH_SET_STR(param, ptype_name);
< _CLISH_GET_STR(param, ptype_name);
< _CLISH_SET_STR(param, access);
< _CLISH_GET_STR(param, access);
< _CLISH_GET_STR(param, name);
< _CLISH_GET_STR(param, text);
< _CLISH_GET_STR(param, range);
< _CLISH_SET_STR_ONCE(param, value);
< _CLISH_GET_STR(param, value);
< _CLISH_SET(param, clish_ptype_t *, ptype);
< _CLISH_GET(param, clish_ptype_t *, ptype);
< _CLISH_SET_STR_ONCE(param, defval);
< _CLISH_GET_STR(param, defval);
< _CLISH_SET_STR_ONCE(param, test);
< _CLISH_GET_STR(param, test);
< _CLISH_SET_STR_ONCE(param, completion);
< _CLISH_GET_STR(param, completion);
< _CLISH_SET(param, clish_param_mode_e, mode);
< _CLISH_GET(param, clish_param_mode_e, mode);
< _CLISH_GET(param, clish_paramv_t *, paramv);
< _CLISH_SET(param, bool_t, optional);
< _CLISH_GET(param, bool_t, optional);
< _CLISH_SET(param, bool_t, order);
< _CLISH_GET(param, bool_t, order);
< _CLISH_SET(param, bool_t, hidden);
< _CLISH_GET(param, bool_t, hidden);
< _CLISH_GET(param, unsigned int, param_count);
---
> /*-----------------
>  * attributes
>  *----------------- */
> void clish_param__set_ptype_name(clish_param_t *instance, const char *ptype_name);
> const char * clish_param__get_ptype_name(const clish_param_t *instance);
> const char *clish_param__get_name(const clish_param_t * instance);
> const char *clish_param__get_text(const clish_param_t * instance);
> const char *clish_param__get_range(const clish_param_t * instance);
> const char *clish_param__get_default(const clish_param_t * instance);
> clish_ptype_t *clish_param__get_ptype(const clish_param_t * instance);
> void clish_param__set_ptype(clish_param_t *instance, clish_ptype_t *ptype);
> void clish_param__set_default(clish_param_t * instance, const char *defval);
> void clish_param__set_mode(clish_param_t * instance, clish_param_mode_e mode);
> clish_param_mode_e clish_param__get_mode(const clish_param_t * instance);
69,71c80,98
< 	unsigned int index);
< 
< /* Class paramv */
---
> 				unsigned index);
> unsigned int clish_param__get_param_count(const clish_param_t * instance);
> clish_paramv_t *clish_param__get_paramv(clish_param_t * instance);
> void clish_param__set_optional(clish_param_t * instance, bool_t optional);
> bool_t clish_param__get_optional(const clish_param_t * instance);
> void clish_param__set_order(clish_param_t * instance, bool_t order);
> bool_t clish_param__get_order(const clish_param_t * instance);
> void clish_param__set_value(clish_param_t * instance, const char * value);
> char *clish_param__get_value(const clish_param_t * instance);
> void clish_param__set_hidden(clish_param_t * instance, bool_t hidden);
> bool_t clish_param__get_hidden(const clish_param_t * instance);
> void clish_param__set_test(clish_param_t * instance, const char *test);
> char *clish_param__get_test(const clish_param_t *instance);
> void clish_param__set_completion(clish_param_t *instance, const char *completion);
> char *clish_param__get_completion(const clish_param_t *instance);
> void clish_param__set_access(clish_param_t *instance, const char *access);
> char *clish_param__get_access(const clish_param_t *instance);
> void clish_param__set_enabled(clish_param_t * instance, bool_t enabled);
> bool_t clish_param__get_enabled(const clish_param_t * instance);
72a100
> /* paramv methods */
85a114
> /** @} clish_param */
