<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2019 Dell, Inc.  

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--> 

<CLISH_MODULE
    xmlns="http://www.dellemc.com/sonic/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xsi:schemaLocation="http://www.dellemc.com/sonic/XMLSchema
                        http://www.dellemc.com/sonic/XMLSchema/clish.xsd"
    >
    <!--=======================================================-->

<VIEW name="configure-router-bgp-ipv4-view" prompt="${SYSTEM_NAME}(config-router-bgp-af)# " depth="3">
  <NAMESPACE ref="configure-view" help="false" completion="false" />
  <NAMESPACE ref="configure-router-bgp-view" help="false" completion="false" />
  <COMMAND name="redistribute" help="Redistribute information from another routing protocol">
    <PARAM name="protocol" help="protocol" mode="switch" ptype="SUBCOMMAND">
      <PARAM name="connected" help="Connected Routes" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="static" help="Static Routes" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="ospf" help="Open Shortest Path First (OSPFv2)" mode="subcommand" ptype="SUBCOMMAND"/>
    </PARAM>
    <PARAM name="route-map" help="Route-map reference" mode="subcommand" ptype="SUBCOMMAND" optional="true">
      <PARAM name="route-map-name" help="Route map name" ptype="STRING"/>
    </PARAM>
    <PARAM name="metric" help="Metric for redistributed routes" mode="subcommand" ptype="SUBCOMMAND" optional="true">
      <PARAM name="metvalue" help="Default metric" ptype="RANGE_0_4294967295"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:GblV4 ${vrf-name} ${__cmd} &#xA; route-map-name:${route-map-name} protocol:${protocol} protocol:${protocol} metric:${metric} metvalue:${metvalue}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        Redistribute information from another routing protocol to BGP. User will
        have an option to apply a route-map to control the routes that can be
        redistributed into BGP.
      </DESCRIPTION>
      <USAGE>
        User can provide a route-map while enabling redistribution of routes to
        control the routes that goes into BGP. User can also use metric option
        to set the default metric for the redistributed routes.
      </USAGE>
      <EXAMPLE summary="Enable redistribution of connected routes into BGP">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# address-family ipv4 unicast
        sonic(config-router-bgp-af)# redistribute connected
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
    <COMMAND name="maximum-paths" help="Forward packets over multiple paths">
      <PARAM name="paths" help="Number of paths" ptype="RANGE_1_256"/>
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_network_instance1348121867 ${vrf-name} IPV4_UNICAST ${paths}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
          Sets the maximum number of equal cost multipath for eBGP.
        </DESCRIPTION>
        <USAGE>
          Use this command to configure BGP to control the maximum number of equal cost
          multipath routes to eBGP destinations. This command is per
          address-family
        </USAGE>
        <EXAMPLE summary="Configures maximum equal cost multipath to 32 for eBGP">
          sonic# configure terminal
          sonic(config)# router bgp 100
          sonic(config-router-bgp)# address-family ipv4 unicast
          sonic(config-router-bgp-af)# maximum-paths 32
        </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="maximum-paths ibgp" help="iBGP-multipath">
       <PARAM name="ipaths" help="Number of paths" ptype="RANGE_1_256">
         <PARAM name="equal-cluster-length" help="Match the cluster length" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
       </PARAM>
       <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:GblV4 ${vrf-name} ${__cmd} &#xA; ipaths:${ipaths} equal-cluster-length:${equal-cluster-length}</ACTION>
       <DOCGEN>
        <DESCRIPTION>
          Sets the maximum number of equal cost multipath for iBGP.
        </DESCRIPTION>
        <USAGE>
          Use this command to configure BGP to control the maximum number of equal cost
          multipath routes to iBGP destinations. This command is per
          address-family
        </USAGE>
        <EXAMPLE summary="Configures maximum equal cost multipath to 32 for iBGP">
          sonic# configure terminal
          sonic(config)# router bgp 100
          sonic(config-router-bgp)# address-family ipv4 unicast
          sonic(config-router-bgp-af)# maximum-paths ibgp 32
        </EXAMPLE>
       </DOCGEN>
    </COMMAND>
  <COMMAND name="network" help="Enable routing on an IP network">
    <PARAM name="prefix" help="Network number" ptype="IP_ADDR_MASK">
      <PARAM name="backdoor" help="Backdoor" ptype="SUBCOMMAND" mode="subcommand" default="x" optional="true"/>
      <PARAM name="route-map" help="Route-map reference" mode="subcommand" ptype="SUBCOMMAND" optional="true">
        <PARAM name="route-map-name" help="Route map name" ptype="STRING"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:GblV4 ${vrf-name} ${__cmd} &#xA; backdoor:${backdoor} prefix:${prefix} route-map:${route-map} route-map-name:${route-map-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
          This command enables user to add a network to announce via BGP
        </DESCRIPTION>
        <USAGE>
          This command can be used by users and network administrators to
          statically inject routes into BGP. User can use route-map optional
          parameter to modify/set the various attributes of the route. 
        </USAGE>
        <EXAMPLE summary="Creates a network 10.10.0.0/16 which will be announced
          to all BGP neighbors">
          sonic# configure terminal
          sonic(config)# router bgp 100
          sonic(config-router-bgp)# address-family ipv4 unicast
          sonic(config-router-bgp-af)# network 10.10.0.0/16
        </EXAMPLE>
      </DOCGEN>
  </COMMAND>
  <COMMAND name="table-map" help="BGP table to RIB route download filter">
    <PARAM name="rtmap" help="Router map name" ptype="STRING"/>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_global_afi_safis_afi_safi_config_table_map_name ${vrf-name} IPV4_UNICAST ${rtmap}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command enables user to apply a route-map on route updates from BGP
        to Zebra
      </DESCRIPTION>
      <USAGE>
        This command enables user to apply a route-map on route updates from BGP to
        Zebra (RIB manager). All the applicable match operations are allowed, such as match on
        prefix, next-hop, communities, etc. Set operations for this attach-point
        are limited to metric and next-hop only. Any operation of this feature
        does not affect BGPs internal RIB.
      </USAGE>
      <EXAMPLE summary="Following example configures a table-map rmap_block_private">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# address-family ipv4 unicast
        sonic(config-router-bgp-af)# table-map rmap_block_private
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="aggregate-address" help="Configure BGP aggregate entries">
    <PARAM name="prefix" help="Aggregate prefix" ptype="IP_ADDR_MASK">
      <PARAM name="as-set" help="Generate AS set path information" ptype="SUBCOMMAND" mode="subcommand" optional="true"/>
      <PARAM name="summary-only" help="Filter more specific routes from updates" ptype="SUBCOMMAND" mode="subcommand" optional="true"/>
      <PARAM name="route-map" help="Apply route map to aggregate network" mode="subcommand" ptype="SUBCOMMAND" optional="true">
        <PARAM name="rtemap" help="Route-map name" ptype="STRING"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:GblV4 ${vrf-name} ${__cmd} &#xA; rtemap:${rtemap} prefix:${prefix} as-set:${as-set} summary-only:${summary-only}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures an aggregate address and enables aggregation of
        routes that falls in the aggregate address subnet
      </DESCRIPTION>
      <USAGE>
        This command enables user to turn on aggregation of BGP routes.
        "summary-only" option filters out all the aggregates routes and only the
        aggregate address will be advertised by BGP. "as-set" option will make
        sure that AS Path of individual aggregated routes are also included in
        the resulting aggregate route. "route-map" option gives user a finer
        control over the route's attributes 
      </USAGE>
      <EXAMPLE summary="This configuration example setup the aggregate-address
        under ipv4 address-family">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# address-family ipv4 unicast
        sonic(config-router-bgp-af)# aggregate-address 17.35.0.0/16
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="distance" help="Define an administrative distance"/>
  <COMMAND name="distance bgp" help="Define an administrative distance">
    <PARAM name="external" help="Distance for routes external to the AS" ptype="RANGE_1_255">
      <PARAM name="internal" help="Distance for routes internal to the AS" ptype="RANGE_1_255">
        <PARAM name="local" help="Distance for local routes" ptype="RANGE_1_255"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_global_afi_safis_afi_safi_default_route_distance_config ${vrf-name} IPV4_UNICAST ${external} ${internal} ${local}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command changes distance value of BGP. The command allows finer
        control to change the distance values for external routes, internal 
        routes and local routes separately
      </DESCRIPTION>
      <USAGE>
        Use this command to configure administrative distance for BGP route
        types
      </USAGE>
      <EXAMPLE summary="This configuration example sets administrative distance
        of 100, 50 and 10 for external, internal and local BGP routes
        respectively under ipv4 address-family">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# address-family ipv4 unicast
        sonic(config-router-bgp-af)# distance bgp 100 50 10
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="dampening" help="Enable route-flap dampening">
    <PARAM name="halflife" help="Half-life time for the penalty" ptype="RANGE_1_45" optional='true'>
      <PARAM name="reusethr" help="Value to start reusing a route" ptype="RANGE_1_20000" optional='true'>
        <PARAM name="suppressthr" help="Value to start suppressing a route" ptype="RANGE_1_20000">
          <PARAM name="maxsuppress" help="Maximum duration to suppress a stable route" ptype="RANGE_1_255"/>
        </PARAM>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:GblV4 ${vrf-name} ${__cmd} &#xA; reusethr:${reusethr} halflife:${halflife} suppressthr:${suppressthr} maxsuppress:${maxsuppress}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command enables BGP route-flap dampening and specifies dampening
        parameters
      </DESCRIPTION>
      <USAGE>
        Use this command to configure route flap dampening feature for BGP
        routes. Route flap dampening algorithm is compatible with RFC 2439. The
        use of this command is not recommended nowadays. Currently
        implementation works only for IPv4 address family 
      </USAGE>
      <EXAMPLE summary="The below configuration example enables route-flap
        dampeninmg feature">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# address-family ipv4 unicast
        sonic(config-router-bgp-af)# dampening 10 1200 2000 40
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="import" help="Import routes to this address-family"/>
  <COMMAND name="import vrf" help="Import routes from another VRF">
    <PARAM name="import-vrf" help="Import VRF options" mode="switch" ptype="SUBCOMMAND">
       <PARAM name="route-map" help="Route-map reference" mode="subcommand" ptype="SUBCOMMAND" optional="true">
         <PARAM name="route-map-name" help="Route map name" ptype="STRING"/>
       </PARAM>
       <PARAM name="import-vrf-name" help="VRF Name" ptype="STRING_15"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp PATCH_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_global_afi_safis_afi_safi_import_vrf ${vrf-name} IPV4_UNICAST ${import-vrf} ${import-vrf-name} ${route-map-name}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command imports all routes or selective routes based on route-map from other VRF.
      </DESCRIPTION>
      <USAGE>
        Use this command to import routes from other VRF.
      </USAGE>
      <EXAMPLE summary="This configuration example imports the routes from other VRF under ipv4 address-family">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# address-family ipv4 unicast
        sonic(config-router-bgp-af)# import vrf Vrf1
                        or 
        sonic(config-router-bgp-af)# import vrf route-map map1
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>

  <COMMAND name="no" help="no commands"/>
  <COMMAND name="no redistribute" help="Redistribute information from another routing protocol">
    <PARAM name="protocol" help="protocol" mode="switch" ptype="SUBCOMMAND">
      <PARAM name="connected" help="Connected Routes" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="static" help="Static Routes" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="ospf" help="Open Shortest Path First (OSPFv2)" mode="subcommand" ptype="SUBCOMMAND"/>
    </PARAM>
    <PARAM name="route-map" help="Route-map reference" mode="subcommand" ptype="SUBCOMMAND" optional="true">
      <PARAM name="route-map-name" help="Route map name" ptype="STRING"/>
    </PARAM>
    <PARAM name="metric" help="Metric for redistributed routes" mode="subcommand" ptype="SUBCOMMAND" optional="true">
      <PARAM name="metvalue" help="Default metric" ptype="RANGE_0_4294967295"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:GblV4 ${vrf-name} ${__cmd} &#xA; protocol:${protocol}</ACTION>
  </COMMAND>
    <COMMAND name="no maximum-paths" help="Forward packets over multiple paths">
        <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_network_instance1348121867 ${vrf-name} IPV4_UNICAST ${paths}</ACTION>
    </COMMAND>
    <COMMAND name="no maximum-paths ibgp" help="iBGP-multipath">
       <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:GblV4 ${vrf-name} ${__cmd} &#xA; ipaths:${ipaths}</ACTION>
    </COMMAND>
  <COMMAND name="no network" help="Enable routing on an IP network">
    <PARAM name="prefix" help="Network number" ptype="IP_ADDR_MASK">
      <PARAM name="backdoor" help="Backdoor" ptype="SUBCOMMAND" mode="subcommand" optional="true"/>
      <PARAM name="route-map" help="Route-map reference" mode="subcommand" ptype="SUBCOMMAND" optional="true">
        <PARAM name="route-map-name" help="Route map name" ptype="STRING"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:GblV4 ${vrf-name} ${__cmd} &#xA; backdoor:${backdoor} prefix:${prefix} route-map:${route-map}</ACTION>
  </COMMAND>
  <COMMAND name="no table-map" help="BGP table to RIB route download filter">
    <PARAM name="rtmap" help="Number of paths" ptype="STRING" optional="true"/>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_global_afi_safis_afi_safi_config_table_map_name ${vrf-name} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no aggregate-address" help="Configure BGP aggregate entries">
    <PARAM name="prefix" help="Aggregate prefix" ptype="IP_ADDR_MASK">
      <PARAM name="as-set" help="Generate AS set path information" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
        <PARAM name="summary-only" help="Filter more specific routes from updates" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
      <PARAM name="route-map" help="Apply route map to aggregate network" mode="subcommand" ptype="SUBCOMMAND" optional="true">
        <PARAM name="rtemap" help="Route-map name" ptype="STRING"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_global_afi_safis_afi_safi_aggregate_address_config_aggregate_address ${vrf-name} IPV4_UNICAST ${prefix}</ACTION>
  </COMMAND>
  <COMMAND name="no distance" help="Define an administrative distance"/>
  <COMMAND name="no distance bgp" help="Define an administrative distance">
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:GblV4 ${vrf-name} ${__cmd}</ACTION>
  </COMMAND>
  <COMMAND name="no dampening" help="Enable route-flap dampening">
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:GblV4 ${vrf-name} ${__cmd}</ACTION>
  </COMMAND>
  <COMMAND name="no import" help="Import routes to this address-family"/>
  <COMMAND name="no import vrf" help="Import routes from another VRF">
    <PARAM name="import-vrf" help="Import routes from another VRF" mode="switch" ptype="SUBCOMMAND">
       <PARAM name="route-map" help="Route-map reference" mode="subcommand" ptype="SUBCOMMAND">
         <PARAM name="route-map-name" help="Route map name" ptype="STRING"/>
       </PARAM>
       <PARAM name="import-vrf-name" help="VRF Name" ptype="STRING_15"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp DELETE_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_global_afi_safis_afi_safi_import_vrf ${vrf-name} IPV4_UNICAST ${import-vrf} ${import-vrf-name} ${route-map-name}</ACTION>
  </COMMAND>
</VIEW>

<VIEW name="configure-router-bgp-nbr-ipv4-view" prompt="${SYSTEM_NAME}(config-router-bgp-neighbor-af)# " depth="4">
  <NAMESPACE ref="configure-view" help="false" completion="false" />
  <NAMESPACE ref="configure-router-bgp-view" help="false" completion="false" />
  <NAMESPACE ref="configure-router-bgp-nbr-view" help="false" completion="false" />
  <COMMAND name="activate" help="Enable the Address Family for this Neighbor">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_network_instance_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_enabled ${vrf-name} ${nbr-addr} IPV4_UNICAST True</ACTION>
      <DOCGEN>
        <DESCRIPTION>
          This command enables/activates a particular address-family for a BGP
          neighbor
        </DESCRIPTION>
        <USAGE>
          Use this command to activate an address-family for a BGP neighbor.
          This command can be executed multiple times to enable multiple address
          familities for a BGP neighbor
        </USAGE>
        <EXAMPLE summary="Following command enables ipv4 unicast address family
          for a BGP neighbor 20.20.20.2">
          sonic# configure terminal
          sonic(config)# router bgp 100
          sonic(config-router-bgp)# neighbor 20.20.20.2
          sonic(config-router-bgp-neighbor)# remote-as 300
          sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
          sonic(config-router-bgp-neighbor-af)# activate
        </EXAMPLE>
      </DOCGEN>
  </COMMAND>
  <COMMAND name="allowas-in" help="Allow local AS number in as-path">
    <PARAM name="allowopt" help="" mode="switch" ptype="SUBCOMMAND" optional="true">
      <PARAM name="value" help="as-number" ptype="RANGE_1_10"/>
      <PARAM name="origin" help="Only accept my AS in the as-path if the route was originated in my AS" mode="subcommand" ptype="SUBCOMMAND"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; value:${value} origin:${origin}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command allows BGP neighbor to accept as-path with it's own AS number
        present in it.
       </DESCRIPTION>
       <USAGE>
        Accepting own AS in an as-path usually results in AS loop. But
        sometimes, users add AS number to influence the BGP route selection
        process. This command enables user to control when a route with as-path
        containing own AS number should be accepted or not. The command also
        provides flexibility in terms of maximum number of occurrences of AS
        number in as-apth.
       </USAGE>
      <EXAMPLE summary="Following command enable BGP neighbor to accept as-path
        with it's owne AS number repeated 5 or less number of times">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# allowas-in 5
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="route-map" help="Name of the route map">
    <PARAM name="route-name-str" help="route map name" ptype="STRING">
      <PARAM name="direction" help="direction" mode="switch" ptype="SUBCOMMAND">
        <PARAM name="in" help="Filter incoming routing updates" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="out" help="Filter outgoing routing updates" mode="subcommand" ptype="SUBCOMMAND"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; direction:${direction} route-name-str:${route-name-str}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures policy for BGP neighbor using a route-map. The
        policy can be applied in INBOUND or OUTBOUND direction
       </DESCRIPTION>
       <USAGE>
        Use this command to configure policy for BGP neighbor. The policy can be
        applied in inbound or outbound direction. The policy will dicatate if a
        subset of routes needs to be filtered out or/and if attributes of some
        routes needs to be modified
       </USAGE>
      <EXAMPLE summary="Following command configures a route-map for BGP
        neighbor in inbound direction">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# route-map rmap_filter_intra_routes in
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>

  <COMMAND name="addpath-tx-all-paths" help="Use addpath to advertise all paths to a neighbor">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_add_paths_config_tx_add_paths ${vrf-name} ${nbr-addr} IPV4_UNICAST TX_ALL_PATHS</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command enables BGP to advertise all paths to a neighbor.
       </DESCRIPTION>
       <USAGE>
        Use this command for BGP add path feature configuration. This command
        allows all BGP paths to be advertised to a neighbor 
       </USAGE>
      <EXAMPLE summary="Following command configures BGP to advertise
        all paths to a neighbor">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# addpath-tx-all-paths
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="addpath-tx-bestpath-per-AS" help="Use addpath to advertise the bestpath per each neighboring AS">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_add_paths_config_tx_add_paths ${vrf-name} ${nbr-addr} IPV4_UNICAST TX_BEST_PATH_PER_AS</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command enables BGP to advertise best paths to a neighbor.
       </DESCRIPTION>
       <USAGE>
        Use this command for BGP add path feature configuration. This command
        allows best BGP path to be advertised to a neighbor 
       </USAGE>
      <EXAMPLE summary="Following command configures BGP to advertise best path to a neighbor">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# addpath-tx-bestpath-per-AS
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="as-override" help="Override ASNs in outbound updates if aspath equals remote-as">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_as_override ${vrf-name} ${nbr-addr} IPV4_UNICAST True</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command instructs BGP to override AS Numbers in outbound updates if
        aspath equals remote-as
       </DESCRIPTION>
       <USAGE>
        Use this command to override the as number in outbound updates
       </USAGE>
      <EXAMPLE summary="Following command configures BGP to override AS number
        in as-path">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# as-override
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="attribute-unchanged" help="BGP attribute is propagated unchanged to this neighbor">
    <PARAM name="as-path" help="As-path attribute" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
    <PARAM name="med" help="Med attribute" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
    <PARAM name="next-hop" help="Nexthop attribute" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; as-path:${as-path} med:${med} next-hop:${next-hop}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command instructs BGP to propagate route attributes (as-path,
        next-hop, med) unchanged to this neighbor
       </DESCRIPTION>
       <USAGE>
        Use this command to propagate BGP route attributes unchanged to this
        neighbor. User can control which attributes (as-path, next-hop, med) i
        will be propagated unchanged.
       </USAGE>
      <EXAMPLE summary="Following command configures BGP to propagate next-hop
        and as-path unchanged to neighbor 20.20.20.2">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# attribute-unchanged as-path next-hop
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="capability" help="_Advertise capability to the peer"/>
  <COMMAND name="capability orf" help="Advertise ORF capability to the peer"/>
  <COMMAND name="capability orf prefix-list" help="Advertise prefixlist ORF capability to this neighbor">
    <PARAM name="capopt" help="Capabilities" mode="switch" ptype="SUBCOMMAND">
      <PARAM name="send" help="Capability to RECEIVE the ORF from this neighbor" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="receive" help="Capability to SEND the ORF to this neighbor" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="both" help="Capability to SEND and RECEIVE the ORF to/from this neighbor" mode="subcommand" ptype="SUBCOMMAND"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_capability_orf_config_orf_type ${vrf-name} ${nbr-addr} IPV4_UNICAST ${capopt}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command enables BGP to advertise Outbound Route Filtering (ORF) capability
        to this neighbor
       </DESCRIPTION>
       <USAGE>
        Use this command to advertise Outbound Route Filtering capability to
        neighbor. This capability can be enabled in inbound and outbound
        direction separately
       </USAGE>
      <EXAMPLE summary="Following command enables BGP to advertise ORF
        capability to neighbor 20.20.20.2">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# capability orf prefix-list send
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="default-originate" help="Originate default route to this neighbor">
    <PARAM name="route-map" help="Route-map to specify criteria to originate default" mode="subcommand" ptype="SUBCOMMAND" optional="true">
      <PARAM name="rtemap" help="Route-map name" ptype="STRING"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; route-map:${route-map} rtemap:${rtemap}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command enables BGP to originate default route to this neighbor
       </DESCRIPTION>
       <USAGE>
        Use this command to originate a default route to this neighbor. User can
        optionally use route-map along with this command to to specify criteria
        to originate default
       </USAGE>
      <EXAMPLE summary="Following command enables BGP to originate a default
        route to neighbor 20.20.20.2">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# default-originate
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="filter-list" help="Establish BGP filters">
    <PARAM name="fname" help="AS path access-list name" ptype="STRING">
      <PARAM name="filtopt" help="Filter options" mode="switch" ptype="SUBCOMMAND">
        <PARAM name="in" help="Filter incoming routes" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="out" help="Filter outgoing routes" mode="subcommand" ptype="SUBCOMMAND"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; filtopt:${filtopt} fname:${fname}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures a filter list for a BGP neighbor
       </DESCRIPTION>
       <USAGE>
        Use this command to define policy (route filtering) for a BGP neighbor
        in outbound or/and inbound direction.
       </USAGE>
      <EXAMPLE summary="Following command configures a filter-list
        fl_allow_remote in inbound direction for neighbor 20.20.20.2">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# filter-list fl_allow_remote in
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="next-hop-self" help="Disable the next hop calculation for this neighbor">
    <PARAM name="force" help="Set the next hop to self for reflected routes" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
     <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; force:${force}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command sets next-hop attribute as it's own address in the outbound
        route updates to this BGP neighbor
       </DESCRIPTION>
       <USAGE>
        Use this command to disable BGP next-hop attribute computation and
        override the next-hop by sender's own address.
       </USAGE>
      <EXAMPLE summary="Following command configures next-hop-self for BGP
        updates sent to neighbor 20.20.20.2">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# next-hop-self
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="prefix-list" help="Filter updates to/from this neighbor">
    <PARAM name="pname" help="Name of a prefix list" ptype="STRING">
      <PARAM name="prfopt" help="Filter options" mode="switch" ptype="SUBCOMMAND">
        <PARAM name="in" help="Filter incoming routes" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="out" help="Filter outgoing routes" mode="subcommand" ptype="SUBCOMMAND"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; prfopt:${prfopt} pname:${pname}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures prefix list for a BGP neighbor
       </DESCRIPTION>
       <USAGE>
        Use this command to define policy (route filtering) for a BGP neighbor
        in outbound or/and inbound direction.
       </USAGE>
      <EXAMPLE summary="Following command configures a prefix-list
        pl_allow_remote in inbound direction for neighbor 20.20.20.2">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# prefix-list pl_allow_remote in
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="remove-private-AS" help="Remove private ASNs in outbound updates">
    <PARAM name="all" help="Apply to all AS numbers" mode="subcommand" ptype="SUBCOMMAND" order="true" optional="true"/>
    <PARAM name="replace-AS" help="Replace private ASNs with our ASN in outbound updates" mode="subcommand" ptype="SUBCOMMAND" order="true" optional="true"/>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; all:${all} replace-AS:${replace-AS}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures BGP to remove private AS numbers from as-path in
        outbound BGP updates to neighbor
       </DESCRIPTION>
       <USAGE>
        Use this command at the boundary of your BGP network to remove 
        the internal/private AS numbers from outbound route updates. User can
        optionally choose to replace private AS number by local AS number.
       </USAGE>
      <EXAMPLE summary="Following command enables BGP to remove all private AS
        numbers from outbound updates to neighbor 20.20.20.2">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# remove-private-AS all
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="route-reflector-client" help="Configure a neighbor as Route Reflector client">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_route_reflector_client ${vrf-name} ${nbr-addr} IPV4_UNICAST True</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures a BGP neighbor as route reflector client.
       </DESCRIPTION>
       <USAGE>
        Use this command to configure an IBGP neighbor a route reflector client.
        This command will implicitly make the local router a route reflector
        server.
       </USAGE>
      <EXAMPLE summary="Following command configures neighbor 20.20.20.2 as
        route reflector client">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# route-reflector-client
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="route-server-client" help="Configure a neighbor as Route Server client">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_route_server_client ${vrf-name} ${nbr-addr} IPV4_UNICAST True</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures a BGP neighbor a route server client.
       </DESCRIPTION>
       <USAGE>
        Use this command to configure an IBGP neighbor a route server client.
       </USAGE>
      <EXAMPLE summary="Following command configures neighbor 20.20.20.2 as
        route server client">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# route-server-client
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="send-community" help="Send Community attribute to this neighbor">
    <PARAM name="comtype" help="Send options" mode="switch" ptype="SUBCOMMAND">
      <PARAM name="standard" help="Send Standard Community attributes" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="extended" help="Send Extended Community attributes" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="both" help="Send Standard and Extended Community attributes" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="large" help="Send large Community attributes" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="all" help="Send all Community attributes" mode="subcommand" ptype="SUBCOMMAND"/> 
      <PARAM name="none" help="Do not send Community attributes" mode="subcommand" ptype="SUBCOMMAND"/> 
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_send_community ${vrf-name} ${nbr-addr} IPV4_UNICAST ${comtype}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures BGP to send community to a neighbor
       </DESCRIPTION>
       <USAGE>
        Use this command to enable sending of community attribute to a BGP
        neighbor. The command option provides the flexibility to enable sending
        of standard, extended, large communities.
       </USAGE>
      <EXAMPLE summary="Following command enables BGP to send community
        attribute to neighbor 20.20.20.2">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# send-community
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="soft-reconfiguration" help="Per neighbor soft reconfiguration">
    <PARAM name="inbound" help="Allow inbound soft reconfiguration for this neighbor" mode="subcommand" ptype="SUBCOMMAND">
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_soft_reconfiguration_in ${vrf-name} ${nbr-addr} IPV4_UNICAST True</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command enables soft-reconfiguration for a BGP neighbor
       </DESCRIPTION>
       <USAGE>
        Use this command to store routes received (RIB-In) from a BGP neighbor.
        These stored routes could be used to refresh the Loc-RIB in future as
        needed. If inbound policy changes, these stored routes will be used to
        generate LocRIB after applying the modified inbound policy.
       </USAGE>
      <EXAMPLE summary="Following command enables soft reconfiguration for neighbor 20.20.20.2">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# soft-reconfiguration
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="unsuppress-map" help="Route-map to selectively unsuppress suppressed routes">
    <PARAM name="map" help="Name of route map" ptype="STRING">
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_unsuppress_map_name ${vrf-name} ${nbr-addr} IPV4_UNICAST ${map}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures a Route-map to selectively unsuppress
        suppressed routes
       </DESCRIPTION>
       <USAGE>
        Use this command to define a route policy via route-map to unsuppress
        suppressed routes.
       </USAGE>
      <EXAMPLE summary="Following command configures an unsuppress map for neighbor 20.20.20.2">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# unsuppress-map rm_unsup_ext_rt
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="weight" help="Set default weight for routes from this neighbor">
    <PARAM name="val" help="Default weight" ptype="RANGE_0_65535"/>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_weight ${vrf-name} ${nbr-addr} IPV4_UNICAST ${val}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures a default weight for all routes received from
        this BGP neighbor
       </DESCRIPTION>
       <USAGE>
        Use this command to assign a default weight to BGP routes received from
        this neighbor. Weight parameter is used in BGP route selection process.
        So, configuring weight may influence the outcome of the route selection
        process
       </USAGE>
      <EXAMPLE summary="Following command configures a default weight of 45 for
        routes received from neighbor 20.20.20.2">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# weight 45
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="maximum-prefix" help="Maximum number of prefixes to accept from this peer">
    <PARAM name="max-prefix-val" help="Maximum no. of prefix limit" ptype="RANGE_1_4294967295">
      <PARAM name="threshold-val" help="Threshold value (%) at which to generate a warning msg" ptype="PERCENT_1" default="0" order="true" optional="true"/>
      <PARAM name="maxpfopt" help="Maximum limit options" mode="switch" ptype="SUBCOMMAND" order="true" optional="true">
        <PARAM name="warning-only" help="Only give warning message when limit is exceeded" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="restart" help="Restart bgp connection after limit is exceeded" mode="subcommand" ptype="SUBCOMMAND">
           <PARAM name="interval" help="Restart interval in minutes" ptype="RANGE_1_65535"/>
        </PARAM>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; threshold-val:${threshold-val} warning-only:${warning-only} restart:${restart} max-prefix-val:${max-prefix-val} maxpfopt:${maxpfopt} interval:${interval}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures the maximum number of prefix to accept from this
        BGP neighbor.
       </DESCRIPTION>
       <USAGE>
        Use this command to set the upper limit on number of BGP prefixes to
        accept from this neighbor. This command has optional parameters for
        warning user when a threshold is reached and rsetarting BGP neighborship
        when maximum prefix limit has exceeded.
       </USAGE>
      <EXAMPLE summary="Following command configures maximum prefix of 2000 from
        neighbor 20.20.20.2. The command also configures a threhold of 80% and
        the action to take is warning when the number of prefxies received
        exceeds the max limit of 2000">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# neighbor 20.20.20.2
        sonic(config-router-bgp-neighbor)# remote-as 300
        sonic(config-router-bgp-neighbor)# address-family ipv4 unicast
        sonic(config-router-bgp-neighbor-af)# maximum-prefix 2000 80 warning-only
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>

  <COMMAND name="no" help="no commands"/>
  <COMMAND name="no activate" help="Disable the Address Family for this Neighbor">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_network_instance_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_enabled ${vrf-name} ${nbr-addr} IPV4_UNICAST False</ACTION>
  </COMMAND>
  <COMMAND name="no allowas-in" help="Allow local AS number in as-path">
    <PARAM name="allowopt" help="" mode="switch" ptype="SUBCOMMAND" optional="true">
      <PARAM name="value" help="as-number" ptype="RANGE_1_10"/>
      <PARAM name="origin" help="Only accept my AS in the as-path if the route was originated in my AS" mode="subcommand" ptype="SUBCOMMAND"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; value:${value}</ACTION>
  </COMMAND>
  <COMMAND name="no route-map" help="Name of the route map">
    <PARAM name="route-name-str" help="route map name" ptype="STRING">
      <PARAM name="direction" help="direction" mode="switch" ptype="SUBCOMMAND" optional="true">
        <PARAM name="in" help="Filter incoming routing updates" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
        <PARAM name="out" help="Filter outgoing routing updates" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; direction:${direction} route-name-str:${route-name-str}</ACTION>
  </COMMAND>
  <COMMAND name="no addpath-tx-all-paths" help="Use addpath to advertise all paths to a neighbor">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_add_paths_config_tx_add_paths ${vrf-name} ${nbr-addr} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no addpath-tx-bestpath-per-AS" help="Use addpath to advertise the bestpath per each neighboring AS">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_add_paths_config_tx_add_paths ${vrf-name} ${nbr-addr} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no as-override" help="Override ASNs in outbound updates if aspath equals remote-as">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_as_override ${vrf-name} ${nbr-addr} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no attribute-unchanged" help="BGP attribute is propagated unchanged to this neighbor">
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd}</ACTION>
  </COMMAND>
  <COMMAND name="no capability" help="Advertise capability to the peer"/>
  <COMMAND name="no capability orf" help="Advertise capability to this neighbor"/>
  <COMMAND name="no capability orf prefix-list" help="Advertise capability to this neighbor">
    <PARAM name="capopt" help="Capabilities" mode="switch" ptype="SUBCOMMAND" optional="true">
      <PARAM name="send" help="Capability to RECEIVE the ORF from this neighbor" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="receive" help="Capability to SEND the ORF to this neighbor" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="both" help="Capability to SEND and RECEIVE the ORF to/from this neighbor" mode="subcommand" ptype="SUBCOMMAND"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_capability_orf_config_orf_type ${vrf-name} ${nbr-addr} IPV4_UNICAST ${capopt}</ACTION>
  </COMMAND>
  <COMMAND name="no default-originate" help="Originate default route to this neighbor">
    <PARAM name="route-map" help="Route-map to specify criteria to originate default" mode="subcommand" ptype="SUBCOMMAND" optional="true">
      <PARAM name="rtemap" help="Route-map name" ptype="STRING"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; rtemap:${rtemap}</ACTION>
  </COMMAND>
  <COMMAND name="no filter-list" help="Establish BGP filters">
    <PARAM name="fname" help="AS path access-list name" ptype="STRING">
      <PARAM name="filtopt" help="Filter options" mode="switch" ptype="SUBCOMMAND">
        <PARAM name="in" help="Filter incoming routes" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="out" help="Filter outgoing routes" mode="subcommand" ptype="SUBCOMMAND"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; filtopt:${filtopt} fname:${fname}</ACTION>
  </COMMAND>
  <COMMAND name="no next-hop-self" help="Disable the next hop calculation for this neighbor">
    <PARAM name="force" help="Set the next hop to self for reflected routes" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
     <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd}</ACTION>
  </COMMAND>
  <COMMAND name="no prefix-list" help="Filter updates to/from this neighbor">
    <PARAM name="pname" help="Name of a prefix list" ptype="STRING">
      <PARAM name="prfopt" help="Filter options" mode="switch" ptype="SUBCOMMAND">
        <PARAM name="in" help="Filter incoming routes" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="out" help="Filter outgoing routes" mode="subcommand" ptype="SUBCOMMAND"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd} &#xA; prfopt:${prfopt} pname:${pname}</ACTION>
  </COMMAND>
  <COMMAND name="no remove-private-AS" help="Remove private ASNs in outbound updates">
    <PARAM name="all" help="Apply to all AS numbers" mode="subcommand" ptype="SUBCOMMAND" order="true" optional="true"/>
    <PARAM name="replace-AS" help="Replace private ASNs with our ASN in outbound updates" mode="subcommand" ptype="SUBCOMMAND" order="true" optional="true"/>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd}</ACTION>
  </COMMAND>
  <COMMAND name="no route-reflector-client" help="Configure a neighbor as Route Reflector client">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_route_reflector_client ${vrf-name} ${nbr-addr} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no route-server-client" help="Configure a neighbor as Route Server client">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_route_server_client ${vrf-name} ${nbr-addr} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no send-community" help="Send Community attribute to this neighbor">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_send_community ${vrf-name} ${nbr-addr} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no soft-reconfiguration" help="Per neighbor soft reconfiguration">
    <PARAM name="inbound" help="Allow inbound soft reconfiguration for this neighbor" mode="subcommand" ptype="SUBCOMMAND">
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_soft_reconfiguration_in ${vrf-name} ${nbr-addr} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no unsuppress-map" help="Route-map to selectively unsuppress suppressed routes">
    <PARAM name="map" help="Name of route map" ptype="STRING">
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_unsuppress_map_name ${vrf-name} ${nbr-addr} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no weight" help="Set default weight for routes from this neighbor">
    <PARAM name="val" help="Default weight" ptype="RANGE_0_65535" optional="true"/>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_neighbors_neighbor_afi_safis_afi_safi_config_weight ${vrf-name} ${nbr-addr} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no maximum-prefix" help="Maximum number of prefixes to accept from this peer">
    <PARAM name="max-prefix-val" help="Maximum no. of prefix limit" ptype="RANGE_1_4294967295" optional="true">
      <PARAM name="mxopt" help="Maximum limit options" mode="switch" ptype="SUBCOMMAND" optional="true">
        <PARAM name="threshold-val" help="Threshold value (%) at which to generate a warning msg" mode="subcommand" ptype="PERCENT_1"/>
        <PARAM name="warning-only" help="Only give warning message when limit is exceeded" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="restart" help="Restart bgp connection after limit is exceeded" mode="subcommand" ptype="SUBCOMMAND">
           <PARAM name="val" help="tbd" ptype="RANGE_1_255"/>
        </PARAM>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:NbrV4 ${vrf-name} ${nbr-addr} ${__cmd}</ACTION>
  </COMMAND>
</VIEW>

<VIEW name="configure-router-bgp-template-ipv4-view" prompt="${SYSTEM_NAME}(config-router-bgp-pg-af)# " depth="4">
  <NAMESPACE ref="configure-view" help="false" completion="false" />
  <NAMESPACE ref="configure-router-bgp-view" help="false" completion="false" />
  <NAMESPACE ref="configure-router-bgp-template-view" help="false" completion="false" />
  <COMMAND name="activate" help="Enable the Address Family for this Neighbor">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_network_instance_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_enabled ${vrf-name} ${template-name} IPV4_UNICAST True</ACTION>
      <DOCGEN>
        <DESCRIPTION>
          This command enables/activates a particular address-family for a BGP
          peer-group
        </DESCRIPTION>
        <USAGE>
          Use this command to activate an address-family for a BGP peer-group.
          This command can be executed multiple times to enable multiple address
          familities for a BGP peer-group
        </USAGE>
        <EXAMPLE summary="Following command enables ipv4 unicast address family
          for a BGP peer-group PG_External">
          sonic# configure terminal
          sonic(config)# router bgp 100
          sonic(config-router-bgp)# peer-group PG_Ext
          sonic(config-router-bgp-pg)# remote-as 300
          sonic(config-router-bgp-pg)# address-family ipv4 unicast
          sonic(config-router-bgp-pg-af)# activate
        </EXAMPLE>
      </DOCGEN>
  </COMMAND>
  <COMMAND name="allowas-in" help="Allow local AS number in as-path">
    <PARAM name="allowopt" help="" mode="switch" ptype="SUBCOMMAND" optional="true">
      <PARAM name="value" help="as-number" ptype="RANGE_1_10"/>
      <PARAM name="origin" help="Only accept my AS in the as-path if the route was originated in my AS" mode="subcommand" ptype="SUBCOMMAND"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; value:${value} origin:${origin}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command allows neighbors in a BGP peer-group to accept as-path 
        with it's own AS number present in it.
       </DESCRIPTION>
       <USAGE>
        Accepting own AS in an as-path usually results in AS loop. But
        sometimes, users add AS number to influence the BGP route selection
        process. This command enables user to control when a route with as-path
        containing own AS number should be accepted or not. The command also
        provides flexibility in terms of maximum number of occurrences of AS
        number in as-apth.
       </USAGE>
      <EXAMPLE summary="Following command configured allowas-in for a BGP peer-group PG_External">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Ext
        sonic(config-router-bgp-pg)# remote-as 300
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# allowas-in
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="route-map" help="Name of the route map">
    <PARAM name="route-name-str" help="route map name" ptype="STRING">
      <PARAM name="direction" help="direction" mode="switch" ptype="SUBCOMMAND">
        <PARAM name="in" help="Filter incoming routing updates" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="out" help="Filter outgoing routing updates" mode="subcommand" ptype="SUBCOMMAND"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; direction:${direction} route-name-str:${route-name-str}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures policy for BGP neighbors in peer-group using a route-map. The
        policy can be applied in INBOUND or OUTBOUND direction
       </DESCRIPTION>
       <USAGE>
        Use this command to configure policy for BGP peer-group. The policy can be
        applied in inbound or outbound direction. The policy will dicatate if a
        subset of routes needs to be filtered out or/and if attributes of some
        routes needs to be modified
       </USAGE>
      <EXAMPLE summary="Following command configures a route-map for BGP
        peer-group in inbound direction">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Ext
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# route-map RM_Blk_192 in
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>

  <COMMAND name="addpath-tx-all-paths" help="Use addpath to advertise all paths to a neighbor">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_add_paths_config_tx_add_paths ${vrf-name} ${template-name} IPV4_UNICAST TX_ALL_PATHS</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command enables BGP to advertise all paths to neighbors in a
        peer-group.
       </DESCRIPTION>
       <USAGE>
        Use this command for BGP add path feature configuration. This command
        allows all BGP paths to be advertised to neighbors in a peer-group 
       </USAGE>
      <EXAMPLE summary="Following command configures BGP to advertise all paths 
        to neighbors in a peer-group">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Ext
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# addpath-tx-all-paths
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="addpath-tx-bestpath-per-AS" help="Use addpath to advertise the bestpath per each neighboring AS">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_add_paths_config_tx_add_paths ${vrf-name} ${template-name} IPV4_UNICAST TX_BEST_PATH_PER_AS</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command enables BGP to advertise best paths to neighbors in a
        peer-group.
       </DESCRIPTION>
       <USAGE>
        Use this command for BGP add path feature configuration. This command
        allows best BGP path to be advertised to neighbors in a peer-group 
       </USAGE>
      <EXAMPLE summary="Following command configures BGP to advertise best path
        to neighbors in a peer-group">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Ext
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# addpath-tx-bestpath-per-AS
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="as-override" help="Override ASNs in outbound updates if aspath equals remote-as">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_as_override ${vrf-name} ${template-name} IPV4_UNICAST True</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command instructs BGP to override AS Numbers in outbound updates if
        aspath equals remote-as
       </DESCRIPTION>
       <USAGE>
        Use this command to override the as number in outbound updates
       </USAGE>
      <EXAMPLE summary="Following command configures BGP to override AS number
        in as-path">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Ext
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# as-override
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="attribute-unchanged" help="BGP attribute is propagated unchanged to this neighbor">
    <PARAM name="as-path" help="As-path attribute" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
    <PARAM name="med" help="Med attribute" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
    <PARAM name="next-hop" help="Nexthop attribute" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; as-path:${as-path} med:${med} next-hop:${next-hop}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command instructs BGP to propagate route attributes (as-path,
        next-hop, med) unchanged to neighbors in a peer-group
       </DESCRIPTION>
       <USAGE>
        Use this command to propagate BGP route attributes unchanged to 
        neighbors in a peer-group. User can control which attributes (as-path, 
        next-hop, med) will be propagated unchanged.
       </USAGE>
      <EXAMPLE summary="Following command configures BGP to propagate next-hop 
        and as-path unchanged to neighbors in a peer-group">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Ext
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# attribute-unchanged as-path next-hop
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="capability" help="Advertise capability to the peer"/>
  <COMMAND name="capability orf" help="Advertise capability to this neighbor"/>
  <COMMAND name="capability orf prefix-list" help="Advertise capability to this neighbor">
    <PARAM name="capopt" help="Capabilities" mode="switch" ptype="SUBCOMMAND">
      <PARAM name="send" help="Capability to RECEIVE the ORF from this neighbor" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="receive" help="Capability to SEND the ORF to this neighbor" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="both" help="Capability to SEND and RECEIVE the ORF to/from this neighbor" mode="subcommand" ptype="SUBCOMMAND"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_capability_orf_config_orf_type ${vrf-name} ${template-name} IPV4_UNICAST ${capopt}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command enables BGP to advertise Outbound Route Filtering (ORF) capability
        to neighbors in a peer-group
       </DESCRIPTION>
       <USAGE>
        Use this command to advertise Outbound Route Filtering capability to
        neighbors in a peer-group. This capability can be enabled in inbound 
        and outbound direction separately
       </USAGE>
      <EXAMPLE summary="Following command enables BGP to advertise ORF
        capability to neighbors in a peer-group">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Ext
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# capability orf prefix-list send
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="default-originate" help="Originate default route to this neighbor">
    <PARAM name="route-map" help="Route-map to specify criteria to originate default" mode="subcommand" ptype="SUBCOMMAND" optional="true">
      <PARAM name="rtemap" help="Route-map name" ptype="STRING"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; route-map:${route-map} rtemap:${rtemap}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command enables BGP to originate default route to neighbors in a
        peer-group
       </DESCRIPTION>
       <USAGE>
        Use this command to originate default route to neighbors in a peer-group. User can
        optionally use route-map along with this command to to specify criteria
        to originate default
       </USAGE>
      <EXAMPLE summary="Following command enables BGP to originate default
        route to neighbors in peer-group PG_Ext">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Ext
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# default-originate
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="filter-list" help="Establish BGP filters">
    <PARAM name="fname" help="AS path access-list name" ptype="STRING">
      <PARAM name="filtopt" help="Filter options" mode="switch" ptype="SUBCOMMAND">
        <PARAM name="in" help="Filter incoming routes" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="out" help="Filter outgoing routes" mode="subcommand" ptype="SUBCOMMAND"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; filtopt:${filtopt} fname:${fname}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures a filter list for BGP peer-group
       </DESCRIPTION>
       <USAGE>
        Use this command to define policy (route filtering) for a BGP peer-group
        in outbound or/and inbound direction.
       </USAGE>
      <EXAMPLE summary="Following command configures a filter-list
        fl_allow_remote in inbound direction for peer-group PG_Ext">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Ext
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# filter-list fl_allow_remote in
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="next-hop-self" help="Disable the next hop calculation for this neighbor">
    <PARAM name="force" help="Set the next hop to self for reflected routes" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
     <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; force:${force}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command sets next-hop attribute as it's own address in the outbound
        route updates to BGP neighbors in a peer-group
       </DESCRIPTION>
       <USAGE>
        Use this command to disable BGP next-hop attribute computation and
        override the next-hop by sender's own address.
       </USAGE>
      <EXAMPLE summary="Following command configures next-hop-self for BGP
        updates sent to neighbors in peer-group PG_Ext">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Ext
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# next-hop-self
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="prefix-list" help="Filter updates to/from this neighbor">
    <PARAM name="pname" help="Name of a prefix list" ptype="STRING">
      <PARAM name="prfopt" help="Filter options" mode="switch" ptype="SUBCOMMAND">
        <PARAM name="in" help="Filter incoming routes" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="out" help="Filter outgoing routes" mode="subcommand" ptype="SUBCOMMAND"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; prfopt:${prfopt} pname:${pname}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures prefix list for a BGP peer-group
       </DESCRIPTION>
       <USAGE>
        Use this command to define policy (route filtering) for a BGP peer-group
        in outbound or/and inbound direction.
       </USAGE>
      <EXAMPLE summary="Following command configures a prefix-list
        pl_allow_remote in inbound direction for peer-group PG_Ext">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Ext
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# prefix-list pl_allow_remote in
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="remove-private-AS" help="Remove private ASNs in outbound updates">
    <PARAM name="all" help="Apply to all AS numbers" mode="subcommand" ptype="SUBCOMMAND" order="true" optional="true"/>
    <PARAM name="replace-AS" help="Replace private ASNs with our ASN in outbound updates" mode="subcommand" ptype="SUBCOMMAND" order="true" optional="true"/>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; all:${all} replace-AS:${replace-AS}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures BGP to remove private AS numbers from as-path in
        outbound BGP updates to neighbors in a peer-group
       </DESCRIPTION>
       <USAGE>
        Use this command at the boundary of your BGP network to remove 
        the internal/private AS numbers from outbound route updates. User can
        optionally choose to replace private AS number by local AS number.
       </USAGE>
      <EXAMPLE summary="Following command enables BGP to remove all private AS
        numbers from outbound updates to peer-group PG_Ext">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Ext
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# remove-private-AS all
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="route-reflector-client" help="Configure a neighbor as Route Reflector client">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_route_reflector_client ${vrf-name} ${template-name} IPV4_UNICAST True</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures BGP neighbors in a peer-group as route reflector client.
       </DESCRIPTION>
       <USAGE>
        Use this command to configure an IBGP peer-group route reflector client.
       </USAGE>
      <EXAMPLE summary="Following command configures neighbors in a peer-group as
        route reflector client">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Int
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# route-reflector-client
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="route-server-client" help="Configure a neighbor as Route Server client">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_route_server_client ${vrf-name} ${template-name} IPV4_UNICAST True</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures BGP neighbors in a peer-group route server client.
       </DESCRIPTION>
       <USAGE>
        Use this command to configure an IBGP peer-group route server client.
       </USAGE>
      <EXAMPLE summary="Following command configures neighbors in a peer-group as
        route server client">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Int
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# route-server-client
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="send-community" help="Send Community attribute to this neighbor">
    <PARAM name="comtype" help="Send options" mode="switch" ptype="SUBCOMMAND">
      <PARAM name="standard" help="Send Standard Community attributes" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="extended" help="Send Extended Community attributes" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="both" help="Send Standard and Extended Community attributes" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="large" help="Send large Community attributes" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="all" help="Send all Community attributes" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="none" help="Do not send Community attributes" mode="subcommand" ptype="SUBCOMMAND"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_send_community ${vrf-name} ${template-name} IPV4_UNICAST ${comtype}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures BGP to send community to neighbors in a
        peer-group
       </DESCRIPTION>
       <USAGE>
        Use this command to enable sending of community attribute to BGP
        neighbors in a peer-group. The command option provides the flexibility to enable sending
        of standard, extended, large communities.
       </USAGE>
      <EXAMPLE summary="Following command enables BGP to send community
        attribute to neighbors in a peer-group PG_Int">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Int
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# send-community
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="soft-reconfiguration" help="Per neighbor soft reconfiguration">
    <PARAM name="inbound" help="Allow inbound soft reconfiguration for this neighbor" mode="subcommand" ptype="SUBCOMMAND">
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_soft_reconfiguration_in ${vrf-name} ${template-name} IPV4_UNICAST True</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command enables soft-reconfiguration for BGP neighbors in a
        peer-group
       </DESCRIPTION>
       <USAGE>
        Use this command to store routes received (RIB-In) from BGP neighbors in
        a peer-group. These stored routes could be used to refresh the Loc-RIB in 
        future as needed. If inbound policy changes, these stored routes will be used to
        generate LocRIB after applying the modified inbound policy.
       </USAGE>
      <EXAMPLE summary="Following command enables soft reconfiguration for
        neighbors in a peer-group">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Int
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# soft-reconfiguration
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="unsuppress-map" help="Route-map to selectively unsuppress suppressed routes">
    <PARAM name="map" help="Name of route map" ptype="STRING">
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_unsuppress_map_name ${vrf-name} ${template-name} IPV4_UNICAST ${map}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures a Route-map to selectively unsuppress
        suppressed routes
       </DESCRIPTION>
       <USAGE>
        Use this command to define a route policy via route-map to unsuppress
        suppressed routes.
       </USAGE>
      <EXAMPLE summary="Following command configures an unsuppress map for a
        peer-group">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Int
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# unsuppress-map rm_unsup_ext_rt
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="weight" help="Set default weight for routes from this neighbor">
    <PARAM name="val" help="Default weight" ptype="RANGE_0_65535"/>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_weight ${vrf-name} ${template-name} IPV4_UNICAST ${val}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures a default weight for all routes received from
        neighbors in this peer-group
       </DESCRIPTION>
       <USAGE>
        Use this command to assign a default weight to BGP routes received from
        neighbors in this peer-group. Weight parameter is used in BGP route 
        selection process.  So, configuring weight may influence the outcome of 
        the route selection process
       </USAGE>
      <EXAMPLE summary="Following command configures a default weight of 25 for
        routes received from neighbors in peer-group PG_Ext">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Int
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# weight 25
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>
  <COMMAND name="maximum-prefix" help="Maximum number of prefixes to accept from this peer">
    <PARAM name="max-prefix-val" help="Maximum no. of prefix limit" ptype="RANGE_1_4294967295">
      <PARAM name="threshold-val" help="Threshold value (%) at which to generate a warning msg" ptype="PERCENT_1" default="0" order="true" optional="true"/>
      <PARAM name="maxpfopt" help="Maximum limit options" mode="switch" ptype="SUBCOMMAND" order="true" optional="true">
        <PARAM name="warning-only" help="Only give warning message when limit is exceeded" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="restart" help="Restart bgp connection after limit is exceeded" mode="subcommand" ptype="SUBCOMMAND">
           <PARAM name="interval" help="Restart interval in minutes" ptype="RANGE_1_65535"/>
        </PARAM>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; threshold-val:${threshold-val} warning-only:${warning-only} restart:${restart} max-prefix-val:${max-prefix-val} maxpfopt:${maxpfopt} interval:${interval}</ACTION>
    <DOCGEN>
      <DESCRIPTION>
        This command configures the maximum number of prefix to accept from 
        BGP neighbors in a peer-group.
       </DESCRIPTION>
       <USAGE>
        Use this command to set the upper limit on number of BGP prefixes to
        accept from neighbors in a peer-group. This command has optional parameters for
        warning user when a threshold is reached and rsetarting BGP neighborship
        when maximum prefix limit has exceeded.
       </USAGE>
      <EXAMPLE summary="Following command configures maximum prefix of 2000 from
        neighbors in peer-group PG_Int. The command also configures a threhold of 80% and
        the action to take is warning when the number of prefxies received
        exceeds the max limit of 2000">
        sonic# configure terminal
        sonic(config)# router bgp 100
        sonic(config-router-bgp)# peer-group PG_Int
        sonic(config-router-bgp-pg)# address-family ipv4 unicast
        sonic(config-router-bgp-pg-af)# maximum-prefix 2000 80 warning-only
      </EXAMPLE>
    </DOCGEN>
  </COMMAND>

  <COMMAND name="no" help="no commands"/>
  <COMMAND name="no activate" help="Disable the Address Family for this Neighbor">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp patch_openconfig_network_instance_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_enabled ${vrf-name} ${template-name} IPV4_UNICAST False</ACTION>
  </COMMAND>
  <COMMAND name="no allowas-in" help="Allow local AS number in as-path">
    <PARAM name="allowopt" help="" mode="switch" ptype="SUBCOMMAND" optional="true">
      <PARAM name="value" help="as-number" ptype="RANGE_1_10"/>
      <PARAM name="origin" help="Only accept my AS in the as-path if the route was originated in my AS" mode="subcommand" ptype="SUBCOMMAND"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; value:${value}</ACTION>
  </COMMAND>
  <COMMAND name="no route-map" help="Name of the route map">
    <PARAM name="route-name-str" help="route map name" ptype="STRING">
      <PARAM name="direction" help="direction" mode="switch" ptype="SUBCOMMAND" optional="true">
        <PARAM name="in" help="Filter incoming routing updates" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
        <PARAM name="out" help="Filter outgoing routing updates" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; direction:${direction} route-name-str:${route-name-str}</ACTION>
  </COMMAND>
  <COMMAND name="no addpath-tx-all-paths" help="Use addpath to advertise all paths to a neighbor">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_add_paths_config_tx_add_paths ${vrf-name} ${template-name} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no addpath-tx-bestpath-per-AS" help="Use addpath to advertise the bestpath per each neighboring AS">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_add_paths_config_tx_add_paths ${vrf-name} ${template-name} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no as-override" help="Override ASNs in outbound updates if aspath equals remote-as">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_as_override ${vrf-name} ${template-name} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no attribute-unchanged" help="BGP attribute is propagated unchanged to this neighbor">
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd}</ACTION>
  </COMMAND>
  <COMMAND name="no capability" help="Advertise capability to the peer"/>
  <COMMAND name="no capability orf" help="Advertise capability to this neighbor"/>
  <COMMAND name="no capability orf prefix-list" help="Advertise capability to this neighbor">
    <PARAM name="capopt" help="Capabilities" mode="switch" ptype="SUBCOMMAND" optional="true">
      <PARAM name="send" help="Capability to RECEIVE the ORF from this neighbor" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="receive" help="Capability to SEND the ORF to this neighbor" mode="subcommand" ptype="SUBCOMMAND"/>
      <PARAM name="both" help="Capability to SEND and RECEIVE the ORF to/from this neighbor" mode="subcommand" ptype="SUBCOMMAND"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_capability_orf_config_orf_type ${vrf-name} ${template-name} IPV4_UNICAST ${capopt}</ACTION>
  </COMMAND>
  <COMMAND name="no default-originate" help="Originate default route to this neighbor">
    <PARAM name="route-map" help="Route-map to specify criteria to originate default" mode="subcommand" ptype="SUBCOMMAND" optional="true">
      <PARAM name="rtemap" help="Route-map name" ptype="STRING"/>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; rtemap:${rtemap}</ACTION>
  </COMMAND>
  <COMMAND name="no filter-list" help="Establish BGP filters">
    <PARAM name="fname" help="AS path access-list name" ptype="STRING">
      <PARAM name="filtopt" help="Filter options" mode="switch" ptype="SUBCOMMAND">
        <PARAM name="in" help="Filter incoming routes" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="out" help="Filter outgoing routes" mode="subcommand" ptype="SUBCOMMAND"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; filtopt:${filtopt} fname:${fname}</ACTION>
  </COMMAND>
  <COMMAND name="no next-hop-self" help="Disable the next hop calculation for this neighbor">
    <PARAM name="force" help="Set the next hop to self for reflected routes" mode="subcommand" ptype="SUBCOMMAND" optional="true"/>
     <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd}</ACTION>
  </COMMAND>
  <COMMAND name="no prefix-list" help="Filter updates to/from this neighbor">
    <PARAM name="pname" help="Name of a prefix list" ptype="STRING">
      <PARAM name="prfopt" help="Filter options" mode="switch" ptype="SUBCOMMAND">
        <PARAM name="in" help="Filter incoming routes" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="out" help="Filter outgoing routes" mode="subcommand" ptype="SUBCOMMAND"/>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd} &#xA; prfopt:${prfopt} pname:${pname}</ACTION>
  </COMMAND>
  <COMMAND name="no remove-private-AS" help="Remove private ASNs in outbound updates">
    <PARAM name="all" help="Apply to all AS numbers" mode="subcommand" ptype="SUBCOMMAND" order="true" optional="true"/>
    <PARAM name="replace-AS" help="Replace private ASNs with our ASN in outbound updates" mode="subcommand" ptype="SUBCOMMAND" order="true" optional="true"/>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd}</ACTION>
  </COMMAND>
  <COMMAND name="no route-reflector-client" help="Configure a neighbor as Route Reflector client">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_route_reflector_client ${vrf-name} ${template-name} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no route-server-client" help="Configure a neighbor as Route Server client">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_route_server_client ${vrf-name} ${template-name} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no send-community" help="Send Community attribute to this neighbor">
      <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_send_community ${vrf-name} ${template-name} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no soft-reconfiguration" help="Per neighbor soft reconfiguration">
    <PARAM name="inbound" help="Allow inbound soft reconfiguration for this neighbor" mode="subcommand" ptype="SUBCOMMAND">
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_soft_reconfiguration_in ${vrf-name} ${template-name} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no unsuppress-map" help="Route-map to selectively unsuppress suppressed routes">
    <PARAM name="map" help="Name of route map" ptype="STRING">
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_unsuppress_map_name ${vrf-name} ${template-name} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no weight" help="Set default weight for routes from this neighbor">
    <PARAM name="val" help="Default weight" ptype="RANGE_0_65535" optional="true"/>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp delete_openconfig_bgp_ext_network_instances_network_instance_protocols_protocol_bgp_peer_groups_peer_group_afi_safis_afi_safi_config_weight ${vrf-name} ${template-name} IPV4_UNICAST</ACTION>
  </COMMAND>
  <COMMAND name="no maximum-prefix" help="Maximum number of prefixes to accept from this peer">
    <PARAM name="max-prefix-val" help="Maximum no. of prefix limit" ptype="RANGE_1_4294967295" optional="true">
      <PARAM name="mxopt" help="Maximum limit options" mode="switch" ptype="SUBCOMMAND" optional="true">
        <PARAM name="threshold-val" help="Threshold value (%) at which to generate a warning msg" mode="subcommand" ptype="PERCENT_1"/>
        <PARAM name="warning-only" help="Only give warning message when limit is exceeded" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="restart" help="Restart bgp connection after limit is exceeded" mode="subcommand" ptype="SUBCOMMAND">
           <PARAM name="val" help="tbd" ptype="RANGE_1_255"/>
        </PARAM>
      </PARAM>
    </PARAM>
    <ACTION builtin="clish_pyobj">sonic_cli_bgp _PyParse:PgpV4 ${vrf-name} ${template-name} ${__cmd}</ACTION>
  </COMMAND>
</VIEW>

</CLISH_MODULE>

